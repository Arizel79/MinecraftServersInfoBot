import config
import requests               # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import telebot               # –û—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from telebot import formatting as frmt  # –ú–æ–¥—É–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
import models                 # –ü–∞–∫–µ—Ç –º–æ–¥–µ–ª–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from models.minecraft_server_info import get_mc_server_info, GetServerInfoError  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö Minecraft
from random import randint     # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
import time                   # –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
from models.orm import MySession, User  # ORM-–º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import logging                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–æ–≥–æ–≤
import os

TOKEN = os.environ.get("BOT_TOKEN")
assert TOKEN is not None, "TOKEN environment variable is not set!"

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger('my_app')
logger.setLevel(logging.DEBUG)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞–∏–ª–æ–≤
file_handler = logging.FileHandler('app.log')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)
# –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(console_handler)


def print_fav_servers(fav_servers: dict):
    out = ""
    if fav_servers:
        for k, v in fav_servers.items():
            out += f"{frmt.hcode(k)} - {frmt.hcode(v)}\n"
    else:
        out = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    return out


# –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_printable_user(from_user):
    usr = from_user
    return f"{usr.first_name}{'' if not usr.last_name else f' {usr.last_name}'} ({f'@{usr.username}, ' if usr.username else ''}{usr.id})"


def get_printable_time():
    return time.strftime("%H:%M.%S %d.%m.%Y", time.localtime())  # —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç


# –∑–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª
def write_msg(msg):
    with open("msgs.txt", "a+", encoding="utf-8") as f:
        text = f"[{get_printable_time()}] {msg}\n"
        f.write(text)
        print(text, end="")


def on_msg(msg):
    write_msg(f"{get_printable_user(msg.from_user)}: {msg.text}")


write_msg("start")


class Bot():
    MAX_FAV_SERVERS = 10
    HELP_TEXT = (frmt.hbold("Get Minecraft Servers Information Bot") + "\n\n" +
                """–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö Minecraft
    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∞–¥—Ä–µ—Å (IP) —Å–µ—Ä–≤–µ—Ä–∞ –∏ —è –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º (–æ–Ω–ª–∞–π–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ –ø—Ä–æ—á.)

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    ‚Ä¢ /stats ADDRESS - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ —Å –∞–¥—Ä–µ—Å–æ–º ADDRESS
    ‚Ä¢ /help - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∞
    ‚Ä¢ /fav - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:
        ‚Ä¢ /fav - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        ‚Ä¢ /fav add 2b2t.org - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –∞–¥—Ä–µ—Å–æ–º 2b2t.org –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–º—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞–¥—Ä–µ—Å–æ–º)
        ‚Ä¢ /fav add 2b2t.org bestServer - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å –∞–¥—Ä–µ—Å–æ–º 2b2t.org –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥ –∏–º–µ–Ω–µ–º bestServer
        ‚Ä¢ /fav del 2b2t.org - —É–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º 2b2t.org –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    """)
    INVILID_CMD_USE = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏: /help"

    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN)
        self.session = MySession()

    def generate_server_description(self, address: str) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            data = get_mc_server_info(address)  # –ø–æ–ø—ã—Ç–∫–∞ –ø–∏–Ω–≥–∞–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É (address)
            if data["ping"]:
                if len(data['players_list']) > 0:
                    pl_list = f"\n‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {(', '.join(frmt.hcode(p['name']) for p in data['players_list']) if data['players_list'] else '-')}"
                else:
                    pl_list = ""
                return f"""{'üü¢' if data['is_online'] else "‚ö´"} {frmt.hbold('–°–µ—Ä–≤–µ—Ä')} {frmt.hcode(address)} 

‚Ä¢ –ó–∞–ø—Ä–æ—Å: {frmt.hcode(address)}
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–π IP: {frmt.hcode(data['address'])}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: 
{frmt.hpre('\n'.join(data['motd']), language="motd")}
‚Ä¢ –í–µ—Ä—Å–∏—è: {frmt.hcode(data['version'])}
‚Ä¢ –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {data['players']} / {data['max_players']}{pl_list} 
"""
            else:
                raise GetServerInfoError(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ "{address}"')  # –µ—Å–ª–∏ –ø–∏–Ω–≥ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è

        except requests.exceptions.Timeout:
            raise GetServerInfoError(
                f'–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ "{address}"')  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Ç–∞–π–º–∞—É—Ç

        except KeyError as e:
            telebot.logger.error("Missing key in data: %s", str(e))
            return frmt.hbold("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö") # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã –¥–∞–Ω–Ω—ã–µ

        except ConnectionError:
            raise GetServerInfoError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!") # –Ω–µ—Ç—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

    def get_markup(self, user_id):
        fav_servers = self.session.get_fav_servers(user_id)
        names = fav_servers.keys()
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in names:
            keyboard.add(
                telebot.types.KeyboardButton(text=f"{i}"))  # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ—Ä–≤–µ—Ä

        return keyboard

    def get_inline_preview(self, inline_query, address, name=""):
        try:
            r1 = telebot.types.InlineQueryResultArticle(
                id=f"{int(time.time())}_{randint(0, 10000)}",
                title=f"üü¢ {name} ‚Ä¢ {address}",
                description="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ",
                input_message_content=telebot.types.InputTextMessageContent(
                    self.generate_server_description(address),  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    parse_mode="HTML"
                )
            )
        except models.minecraft_server_info.GetServerInfoError as ex:
            r1 = telebot.types.InlineQueryResultArticle(
                id=f"{address}_{name}_{int(time.time())}_{randint(0, 10000)}",
                title=f"üî¥ {address} ‚Ä¢ {name}",
                description=f"{ex}",
                input_message_content=telebot.types.InputTextMessageContent(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                    parse_mode="HTML"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º HTML
                )
            )
        return r1

    def add_fav_server(self, msg, address, name):
        # –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fav_servers = self.session.get_fav_servers(msg.from_user.id)
        if len(fav_servers) > self.MAX_FAV_SERVERS:
            self.bot.send_message(msg.chat.id,
                                  f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {self.MAX_FAV_SERVERS}",
                                  reply_to_message_id=msg.id,
                                  reply_markup=self.get_markup(msg.from_user.id))
            return
        fav_servers[f"{name}"] = address  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        self.session.set_fav_servers(msg.from_user.id, fav_servers)
        self.bot.send_message(msg.chat.id, f"–î–æ–±–∞–≤–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä", reply_to_message_id=msg.id,
                              reply_markup=self.get_markup(msg.from_user.id))  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ

    def mainloop(self):
        try:
            bot = self.bot

            # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å '/'
            @bot.message_handler(regexp=r"^(?!\/).+$")
            def handle_other_messages(message: telebot.types.Message) -> None:
                # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                new_user = User(id=message.from_user.id)
                self.session.add_user(new_user)
                on_msg(message)
                # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                fav_servers = self.session.get_fav_servers(message.from_user.id)
                if message.text in fav_servers.keys():
                    try:
                        bot.reply_to(message, self.generate_server_description(fav_servers[message.text]),
                                     parse_mode="HTML", reply_markup=self.get_markup(message.from_user.id))
                    except GetServerInfoError:
                        bot.reply_to(message, "–û—à–∏–±–∫–∞!", parse_mode="HTML",
                                     reply_markup=self.get_markup(message.from_user.id))
                else:
                    handle_stats(message)


            @bot.message_handler(commands=['start'])
            def handle_start(message: telebot.types.Message) -> None:
                """–ö–æ–º–∞–Ω–¥–∞ /start"""
                # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(id=message.from_user.id)
                self.session.add_user(new_user)
                # –ª–æ–≥–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                on_msg(message)
                # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
                                                  f"\n"
                                                  f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Minecraft —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"
                                                  f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏: /help",
                                 reply_markup=self.get_markup(message.from_user.id))

            @bot.message_handler(commands=['fav'])
            def handle_fav(message: telebot.types.Message) -> None:
                """–ö–æ–º–∞–Ω–¥–∞ /fav"""
                # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(id=message.from_user.id)
                self.session.add_user(new_user)
                # –ª–æ–≥–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                on_msg(message)
                ls = message.text.split()
                # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (/fav), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                if len(ls) == 1:
                    fav_servers = self.session.get_fav_servers(message.from_user.id)
                    bot.send_message(message.chat.id, f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n{print_fav_servers(fav_servers)}",
                                     parse_mode="HTML", reply_markup=self.get_markup(message.from_user.id))
                # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (/fav add server-address), –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
                elif len(ls) == 3:
                    if ls[1] in ["add", "a", "+"]:
                        self.add_fav_server(message, ls[2], ls[2])
                    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (/fav del server-name), —É–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
                    elif ls[1] in ["del", "remove", "-"]:
                        fav_servers = self.session.get_fav_servers(message.from_user.id)
                        try:
                            del fav_servers[ls[2]]
                            self.session.set_fav_servers(message.from_user.id, fav_servers)
                            bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏–ª —Å–µ—Ä–≤–µ—Ä", reply_to_message_id=message.id)
                        except:
                            bot.send_message(message.chat.id, f"–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_to_message_id=message.id)
                    else:
                        bot.send_message(message.chat.id, self.INVILID_CMD_USE,
                                         reply_to_message_id=message.id)

                elif len(ls) == 4:
                    if ls[1] in ["add", "a", "+"]:
                        self.add_fav_server(message, ls[2], ls[3])
                    else:
                        bot.send_message(message.chat.id, self.INVILID_CMD_USE,
                                         reply_to_message_id=message.id)

                else:
                    bot.send_message(message.chat.id, self.INVILID_CMD_USE, reply_to_message_id=message.id)

            @bot.message_handler(commands=['help'])
            def handle_help(message: telebot.types.Message) -> None:
                """–ö–æ–º–∞–Ω–¥–∞ /help"""
                # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(id=message.from_user.id)
                self.session.add_user(new_user)
                # –ª–æ–≥–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                on_msg(message)
                # –æ—Ç—Å—ã–ª–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                bot.send_message(message.chat.id, self.HELP_TEXT, parse_mode='html',
                                 reply_markup=self.get_markup(message.from_user.id))

            def send_data(message):
                """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
                try:
                    args = message.text.split()
                    if message.text[0] == "/":
                        if len(args) < 2:
                            raise ValueError

                        ip = args[1]
                    else:
                        ip = args[0]

                    response = self.generate_server_description(ip)

                except ValueError:
                    # –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å
                    error_msg = f"{frmt.hbold('–û—à–∏–±–∫–∞:')} –ù–µ —É–∫–∞–∑–∞–Ω IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {frmt.hcode('/stats 2b2t.org')}"
                    bot.reply_to(message, error_msg, parse_mode='html')
                except GetServerInfoError as ex:
                    error_msg = f"{frmt.hbold('–û—à–∏–±–∫–∞:')} {ex}"
                    bot.reply_to(message, error_msg, parse_mode='html')
                except ConnectionError as e:
                    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                    bot.reply_to(message, frmt.hbold(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"), parse_mode='html')

                else:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
                    bot.send_message(message.chat.id, response, parse_mode='html', reply_to_message_id=message.id)
                    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.session.add_request(message.from_user.id)

            # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            @bot.message_handler(commands=['stats', 'info'])
            def handle_stats(message: telebot.types.Message) -> None:
                new_user = User(id=message.from_user.id)
                self.session.add_user(new_user)
                send_data(message)

            @bot.inline_handler(lambda query: True)
            def query_text(inline_query):
                # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(id=inline_query.from_user.id)
                self.session.add_user(new_user)
                try:
                    write_msg(f"{get_printable_user(inline_query.from_user)} inline: {inline_query.query}")
                    query = inline_query.query.strip()

                    if not query:
                        replyes = []
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        r1 = telebot.types.InlineQueryResultArticle(
                            id=f"{int(time.time())}_{randint(0, 10000)}",
                            title="–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å Minecraft —Å–µ—Ä–≤–µ—Ä–∞",
                            description="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º",
                            input_message_content=telebot.types.InputTextMessageContent(
                                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ Minecraft –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "
                                f"@{bot.get_me().username} –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ:\n"
                                f"@{bot.get_me().username} server-address, –≥–¥–µ server-address - –∞–¥—Ä–µ—Å Minecraft —Å–µ—Ä–≤–µ—Ä–∞",
                                parse_mode="html"
                            )
                        )
                        replyes.append(r1)
                        for k, v in self.session.get_fav_servers(inline_query.from_user.id).items():
                            r = self.get_inline_preview(inline_query, v, k)
                            replyes.append(r)

                        bot.answer_inline_query(inline_query.id, replyes, cache_time=1)
                        return
                    replyes = []

                    try:
                        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.session.add_request(inline_query.from_user.id)
                        # –≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è
                        replyes.append(telebot.types.InlineQueryResultArticle(
                            id=f"{int(time.time())}_{randint(0, 10000)}",
                            title=f"üü¢ {query}",
                            description="–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–ª–∏–∫ —Å—é–¥–∞)",
                            input_message_content=telebot.types.InputTextMessageContent(
                                self.generate_server_description(query),
                                parse_mode="HTML"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º HTML
                            )
                        ))
                        # –¥–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for k, v in self.session.get_fav_servers(inline_query.from_user.id).items():
                            if inline_query.query in k + v:
                                r = self.get_inline_preview(inline_query, v, k)
                                replyes.append(r)

                        bot.answer_inline_query(inline_query.id, replyes, cache_time=1)

                    except GetServerInfoError as ex:
                        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–µ
                        error_msg = str(ex)

                        replyes.append(telebot.types.InlineQueryResultArticle(
                            id=f"{int(time.time())}_{randint(0, 10000)}",
                            title="‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                            description=str(ex),
                            input_message_content=telebot.types.InputTextMessageContent(
                                error_msg,
                                parse_mode=None
                            )
                        ))
                        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É
                        for k, v in self.session.get_fav_servers(inline_query.from_user.id).items():
                            if inline_query.query in k + v:
                                r = self.get_inline_preview(inline_query, v, k)
                                replyes.append(r)
                        bot.answer_inline_query(inline_query.id, replyes, cache_time=1)
                        return

                    except Exception as ex:
                        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏
                        logger.error(f"Inline query error: {str(ex)}")
                        # –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        r = telebot.types.InlineQueryResultArticle(
                            id=f"{int(time.time())}_{randint(0, 10000)}",
                            title="–û—à–∏–±–∫–∞",
                            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                            input_message_content=telebot.types.InputTextMessageContent(
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                            )
                        )
                        bot.answer_inline_query(inline_query.id, [r], cache_time=1)
                finally:
                    pass

            try:
                bot.polling(none_stop=True)
            except telebot.apihelper.ApiTelegramException:
                print("telebot.apihelper.ApiTelegramException 95747")
        except requests.exceptions.ConnectionError as ex:
            logging.error(f"ConnectionError: {ex}")


if __name__ == "__main__":
    running = True
    while running:
        b = Bot()
        b.mainloop()